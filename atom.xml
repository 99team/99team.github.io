<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>99Team</title>
  <subtitle>99Team</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://99team.github.io/"/>
  <updated>2016-12-13T12:34:28.069Z</updated>
  <id>https://99team.github.io/</id>
  
  <author>
    <name>99Team</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>理解使用HTML5布局页面的合适方式</title>
    <link href="https://99team.github.io/post/understanding-the-proper-way-to-lay-out-a-page-with-html5/"/>
    <id>https://99team.github.io/post/understanding-the-proper-way-to-lay-out-a-page-with-html5/</id>
    <published>2016-12-13T12:34:28.069Z</published>
    <updated>2016-12-13T12:34:28.069Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本文翻译自：<a href="http://www.developer.com/lang/understanding-the-proper-way-to-lay-out-a-page-with-html5.html" target="_blank" rel="external">http://www.developer.com/lang/understanding-the-proper-way-to-lay-out-a-page-with-html5.html</a></p>
</blockquote>
<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><p>浏览器中渲染的网页由许多东西组成-logo、信息文本、图片、超链接、导航结构等等。<br>HTML5为网页提供了一系列允许你创建结构化布局的标签。这些元素通常被称为语义化标签，因为它们能够清楚地给开发者和浏览器传达它们的意义和目的。本文将讨论一些有助于网页布局的重要的HTML5标签。</p>
<h2 id="语义化标签"><a href="#语义化标签" class="headerlink" title="语义化标签"></a>语义化标签</h2><p>语义化标签能够将自身的含义和使用目的清晰地传达给开发者和浏览器。网页开发者频繁地使用<code>&lt;div&gt;</code>标签来给网页布局，然而，<code>&lt;div&gt;</code>标签本身并不能传达它在网页中表示什么。<code>&lt;div&gt;</code>标签可能包裹着导航按钮或者放置博客帖子的列表，但是使用<code>&lt;div&gt;</code>几乎不能给开发者和浏览器传达更多的信息。通常CSS类给<code>&lt;div&gt;</code>元素揭示了一些其预期的使用目的。比如考虑下面的标记：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在上面的标记中，CSS类header会让你想到这个<code>&lt;div&gt;</code>可能是用来干嘛的。然而，上面例子中的CSS类不能很容易地被识别这个<code>&lt;div&gt;</code>可能是用来干嘛的。这是因为，<code>&lt;div&gt;</code>是一个具有通用目的的元素，它不具有特定的文档职责（译注：即在html文档中没有特定含义），只是简单地标记一个网页的分割块或者小节，但是不能指示这个小节里能放什么。</p>
<p>HTML5包含了一系列的标记元素来克服这个难题。这些元素拥有有意义的名称，因此只需通过看这些元素，你就能想到它们的内容。这些HTML5的语义化标签罗列如下（这里列出的不是详尽的列表）：</p>
<ul>
<li><code>&lt;header&gt;</code></li>
<li><code>&lt;footer&gt;</code></li>
<li><code>&lt;section&gt;</code></li>
<li><code>&lt;arcticle&gt;</code></li>
<li><code>&lt;aside&gt;</code></li>
<li><code>&lt;nav&gt;</code></li>
</ul>
<p>正如你所见的，这些元素非常有表达力，你可以马上想到其预期的使用目的。下图展示了一个使用这些元素来设计的简单网页布局：</p>
<img src="/post/understanding-the-proper-way-to-lay-out-a-page-with-html5/page_layout.png" alt="页面布局" title="页面布局">
<p>上图展示了一个各种元素的典型排版。请注意，它们在网页中的准确位置纯粹依赖于布局。例如，<code>&lt;aside&gt;</code>元素可以被放置在<code>&lt;section&gt;</code>元素的左边或者甚至是上面或下面。</p>
<p>下图展示了利用这些元素的实际网页：</p>
<img src="/post/understanding-the-proper-way-to-lay-out-a-page-with-html5/actual_page.png" alt="实际页面" title="实际页面">
<p>既然你对语义化元素有了一些想法，那么让我们来讨论每个元素的更多细节。出于我们讨论的目的，我们将以上面的简单网页为例子。</p>
<h2 id="header元素"><a href="#header元素" class="headerlink" title="header元素"></a>header元素</h2><p><code>&lt;header&gt;</code>元素表示整个网页或者一个小节的头部。W3C规范定义<code>&lt;header&gt;</code>元素是像这样的：</p>
<blockquote>
<p><code>&lt;header&gt;</code>元素表示一组具有引导性或者导航性的辅助。header元素通常是用来包含小节的标题，但这不是必需的。header元素还可以用于包裹小节的内容表格、搜索表单或者任何相关的logo。</p>
</blockquote>
<p>上面的解释告诉我们，<code>&lt;header&gt;</code>元素可以包含标题、logo图片、支持文本和可选的导航结构。大部分网页具有以logo、标语和/或支持文本组成的页面标题，header元素扮演着所有这些元素的容器的角色。请注意，header元素不仅可以用于整个网页，而且可以用于网页中独立的小节中。例如，除了页面级别的header，你可以在页面小节的联系信息中使用header元素。</p>
<p>下面的标记展示了<code>&lt;header&gt;</code>元素如何用在我们例子的网页中的：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is page heading<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="nav元素"><a href="#nav元素" class="headerlink" title="nav元素"></a>nav元素</h2><p><code>&lt;nav&gt;</code>元素用于放置导航按钮或者任意的导航结构，如超链接。W3C规范定义<code>&lt;nav&gt;</code>元素是像这样的：</p>
<blockquote>
<p><code>&lt;nav&gt;</code>元素表示带有导航链接的小节。</p>
</blockquote>
<p><code>&lt;nav&gt;</code>小节可以包含从网站到其他网页或者相同网页的其他部分的链接（译注：即页面跳转和页内锚点）。建议只把<code>&lt;nav&gt;</code>标签使用于主导航结构，而不要用于超链接的小集合（比如通常放在网页底部的跳转链接）。</p>
<p>下面的标记展示了<code>&lt;nav&gt;</code>元素如何用在我们例子的网页中的：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>About Us<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Contact Us<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="section元素"><a href="#section元素" class="headerlink" title="section元素"></a>section元素</h2><p>按照W3C规范，<code>&lt;section&gt;</code>元素表示文档或者应用的通用小节。<code>&lt;section&gt;</code>元素不能与<code>&lt;div&gt;</code>混淆，<code>&lt;section&gt;</code>元素是内容的主题组，而<code>&lt;div&gt;</code>没有任何这样的限制。W3C规范进一步明确-<code>&lt;section&gt;</code>只适用于在文档大纲中明确列出的内容。<code>&lt;section&gt;</code>元素可以使用的一些例子包括网页的联系信息小节、网页的公告小节和标签化的用户界面的标签页（译注：即tab结构）。section通常有一些标题。</p>
<p>下面的标记展示了<code>&lt;section&gt;</code>元素的看起来如何：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is a section heading<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">    Hello world! Hello world! Hello world!</div><div class="line">    Hello world! Hello world! Hello world!</div><div class="line">    Hello world! Hello world! Hello world!</div><div class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></div></pre></td></tr></table></figure>
<p>section也可以有自己的<code>&lt;header&gt;</code>元素和<code>&lt;footer&gt;</code>元素。section元素和包含章节的印刷书的小节或者包含新闻条目的新闻报纸的小节是相似的。</p>
<h2 id="article元素"><a href="#article元素" class="headerlink" title="article元素"></a>article元素</h2><p><code>&lt;arcticle&gt;</code>元素表示如博客帖子、论坛帖子或者评论这种独立内容的条目小节。article元素中的内容在内容聚合的情况下，要能独立分发或者可重用。</p>
<p>下面的标记展示了<code>&lt;article&gt;</code>元素看起来如何：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">article</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is article heading<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">    Hello world! Hello world! Hello world!</div><div class="line">    Hello world! Hello world! Hello world!</div><div class="line">    Hello world! Hello world! Hello world!</div><div class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">article</span>&gt;</span></div></pre></td></tr></table></figure>
<p>你会发现，人们有时一起使用<code>&lt;section&gt;</code>和<code>&lt;article&gt;</code>或者使用嵌套的<code>&lt;article&gt;</code>，目前没有严格和准确的规则来决定它们的嵌套方式。无论何时一起使用它们，试着确保生成的结构满足W3C规范所给定的各种元素的预期使用目的。</p>
<h2 id="aside元素"><a href="#aside元素" class="headerlink" title="aside元素"></a>aside元素</h2><p><code>&lt;aside&gt;</code>元素用于放置与周围内容相关的内容，但同时本身是一个独立块。如果你从页面中去掉<code>&lt;aside&gt;</code>，它不能改变或者修改主体页面内容的含义或者明晰度。将它考虑成是一个侧边栏，它提供一些额外的、相关的，但独立的关于讨论的话题的信息。一些<code>&lt;aside&gt;</code>的例子包括-额外的信息、相关的链接和上下文广告。<code>&lt;aside&gt;</code>可以放置任何包含文本信息和图片类型的内容。例如，<code>&lt;aside&gt;</code>在例子的页面中使用看起来像这样：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">aside</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">figure</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/laptop.png"</span> <span class="attr">height</span>=<span class="string">"100px"</span> <span class="attr">width</span>=<span class="string">"100px"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">figcaption</span>&gt;</span>Figure caption goes here<span class="tag">&lt;/<span class="name">figcaption</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">figure</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">    Hello world! Hello world! Hello world!</div><div class="line">    Hello world! Hello world! Hello world!</div><div class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">aside</span>&gt;</span></div></pre></td></tr></table></figure>
<p>正如你所见，上面展示的<code>&lt;aside&gt;</code>元素包含一个<code>&lt;figure&gt;</code>元素和以<code>&lt;p&gt;</code>元素的形式组合的一些文本。<code>&lt;figure&gt;</code>元素用于表示图表，它依次包含<code>&lt;img&gt;</code>和<code>&lt;figcaption&gt;</code>元素。<code>&lt;img&gt;</code>标签指向实际显示的图片，<code>&lt;figcaption&gt;</code>元素则放置着图表的标题。</p>
<h2 id="footer元素"><a href="#footer元素" class="headerlink" title="footer元素"></a>footer元素</h2><p><code>&lt;footer&gt;</code>元素表示整个页面或者<code>&lt;section&gt;</code>元素的底部，它用于包含如版权声明的底部信息。例子的网页中的<code>&lt;footer&gt;</code>元素看起来像这样：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></div><div class="line">  Copyright (C) 2013. All rights reserved.</div><div class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="案例网页的完整标记"><a href="#案例网页的完整标记" class="headerlink" title="案例网页的完整标记"></a>案例网页的完整标记</h2><figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Sample HTML5 Layout<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"StyleSheet.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is page heading<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">nav</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>About Us<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Contact Us<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">article</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is article heading<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">            Hello world! Hello world! Hello world!</div><div class="line">            Hello world! Hello world! Hello world!</div><div class="line">            Hello world! Hello world! Hello world!</div><div class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">article</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">aside</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">figure</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/laptop.png"</span> <span class="attr">height</span>=<span class="string">"100px"</span> <span class="attr">width</span>=<span class="string">"100px"</span> /&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">figcaption</span>&gt;</span>Figure caption goes here<span class="tag">&lt;/<span class="name">figcaption</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">figure</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">            Hello world! Hello world! Hello world!</div><div class="line">            Hello world! Hello world! Hello world!</div><div class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">aside</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is a section heading<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">            Hello world! Hello world! Hello world!</div><div class="line">            Hello world! Hello world! Hello world!</div><div class="line">            Hello world! Hello world! Hello world!</div><div class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></div><div class="line">        Copyright (C) 2013. All rights reserved.</div><div class="line">    <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="为案例网页创建CSS"><a href="#为案例网页创建CSS" class="headerlink" title="为案例网页创建CSS"></a>为案例网页创建CSS</h2><p>在前面创建的案例网页中有StyleSheet.css链接其中。这个样式表包含了一些管理各种语义化元素的外观和感觉的CSS规则。在更真实的情况下，你可能会创建CSS类，然后把它们附到各自的元素上。不过，在这个例子中，为元素定义的样式展示如下：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><div class="line"><span class="selector-tag">article</span></div><div class="line">&#123;</div><div class="line">    <span class="attribute">padding</span>:<span class="number">5px</span>;</div><div class="line">    <span class="attribute">border</span>:dotted <span class="number">3px</span> <span class="number">#ff006e</span>;</div><div class="line">    <span class="attribute">margin-top</span>:<span class="number">5px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">header</span></div><div class="line">&#123;</div><div class="line">    <span class="attribute">padding</span>:<span class="number">0px</span>;</div><div class="line">    <span class="attribute">text-align</span>:center;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">aside</span></div><div class="line">&#123;</div><div class="line">    <span class="attribute">margin-top</span>:<span class="number">5px</span>;</div><div class="line">    <span class="attribute">background-color</span>:<span class="number">#f0eaea</span>;</div><div class="line">    <span class="attribute">padding</span>:<span class="number">5px</span>;</div><div class="line">    <span class="attribute">text-align</span>:center;</div><div class="line">    <span class="attribute">font-style</span>:italic;</div><div class="line">    <span class="attribute">border</span>:double <span class="number">3px</span> <span class="number">#b200ff</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">section</span></div><div class="line">&#123;</div><div class="line">    <span class="attribute">padding</span>:<span class="number">5px</span>;</div><div class="line">    <span class="attribute">border</span>:dashed <span class="number">3px</span> <span class="number">#0026ff</span>;</div><div class="line">    <span class="attribute">margin-top</span>:<span class="number">5px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">footer</span></div><div class="line">&#123;</div><div class="line">    <span class="attribute">padding</span>:<span class="number">5px</span>;</div><div class="line">    <span class="attribute">text-align</span>:center;</div><div class="line">    <span class="attribute">font-weight</span>:bold;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">nav</span></div><div class="line">&#123;</div><div class="line">    <span class="attribute">text-align</span>:center;</div><div class="line">&#125;</div><div class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span></div><div class="line">&#123;</div><div class="line">    <span class="attribute">display</span>:inline;</div><div class="line">    <span class="attribute">padding-left</span>:<span class="number">5px</span>;</div><div class="line">    <span class="attribute">padding-right</span>:<span class="number">5px</span>;</div><div class="line">    <span class="attribute">text-align</span>:left;</div><div class="line">    <span class="attribute">font-size</span>:<span class="number">16px</span>;</div><div class="line">    <span class="attribute">font-weight</span>:bold;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面定义的CSS规则非常的直截了当，不需要解释。简单地把这些规则添加到新的样式表文件中，然后在你先前做的案例网页中链接这个样式表。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文讲到了能够用于网页合适布局的HTML5的语义化标记元素。不像<code>&lt;div&gt;</code>元素，语义化元素预期是用于特定目的的。我们在本文讲到的元素包括<code>&lt;header&gt;</code>、<code>&lt;nav&gt;</code>、<code>&lt;footer&gt;</code>、<code>&lt;section&gt;</code>、<code>&lt;arcticle&gt;</code>和<code>&lt;aside&gt;</code>。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文翻译自：&lt;a href=&quot;http://www.developer.com/lang/understanding-the-proper-way-to-lay-out-a-page-with-html5.html&quot; target=&quot;_blank&quot;
    
    </summary>
    
      <category term="优秀译文" scheme="https://99team.github.io/categories/%E4%BC%98%E7%A7%80%E8%AF%91%E6%96%87/"/>
    
    
  </entry>
  
  <entry>
    <title>快捷技巧：使用figure&amp;figcaption元素的正确方式</title>
    <link href="https://99team.github.io/post/quick-tip-the-right-way-to-use-figure-and-figcaption-elements/"/>
    <id>https://99team.github.io/post/quick-tip-the-right-way-to-use-figure-and-figcaption-elements/</id>
    <published>2016-12-13T12:34:28.069Z</published>
    <updated>2016-12-13T12:34:28.069Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>本文翻译自：<a href="https://www.sitepoint.com/quick-tip-the-right-way-to-use-figure-and-figcaption-elements/" target="_blank" rel="external">https://www.sitepoint.com/quick-tip-the-right-way-to-use-figure-and-figcaption-elements/</a></p>
</blockquote>
<p>figure和figcaption元素是经常一起使用的两个语义化元素，如果你还没看过<a href="https://www.w3.org/TR/html5/grouping-content.html#the-figure-element" target="_blank" rel="external">规范</a>，还没有机会在你的项目中使用它们，或者不知道在项目中如何使用它们的话，这里有些关于如何正确使用它们的小技巧。</p>
<p>figure元素通常用于图片：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">figure</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"dog.jpg"</span> <span class="attr">alt</span>=<span class="string">"Maltese Terrier"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">figure</span>&gt;</span></div></pre></td></tr></table></figure>
<p>figure元素表示内容的自包含单元，这意味着你就算把元素移到文档之下很远的地方或者是文档的末尾，它都不会影响文档的含义。</p>
<p>因此，我们还需要记住的是，并不是每张图都是figure。</p>
<h2 id="figure中的多张图"><a href="#figure中的多张图" class="headerlink" title="figure中的多张图"></a>figure中的多张图</h2><p>你可以将多个img标签放在figure中，如果它们在你文档的上下文是相关联的。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">figure</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"dog1.jpg"</span> <span class="attr">alt</span>=<span class="string">"Maltese Terrier"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"dog2.jpg"</span> <span class="attr">alt</span>=<span class="string">"Black Labrador"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"dog3.jpg"</span> <span class="attr">alt</span>=<span class="string">"Golden Retriever"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">figure</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="能和figure一起用的其他元素"><a href="#能和figure一起用的其他元素" class="headerlink" title="能和figure一起用的其他元素"></a>能和figure一起用的其他元素</h2><p>figure也并不限制仅图片可用，你可以为如下这样的东西使用它：</p>
<ul>
<li>代码块</li>
<li>视频</li>
<li>音频剪辑，或</li>
<li>广告</li>
</ul>
<p>这是figure用于代码块的一个例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">figure</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">pre</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">code</span>&gt;</span></div><div class="line">      p &#123;</div><div class="line">          color: #333;</div><div class="line">          font-family: Helvetica, sans-serif;</div><div class="line">          font-size: 1rem;</div><div class="line">      &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">code</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">pre</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">figure</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="将figure嵌套到另一个figure中"><a href="#将figure嵌套到另一个figure中" class="headerlink" title="将figure嵌套到另一个figure中"></a>将figure嵌套到另一个figure中</h2><p>你可以将figure嵌套到另一个figure中，如果这么做有意义的话。这里，添加了ARIA的role属性来提高语义化。（译注：ARIA是Accessible Rich Internet Application的缩写，指无障碍互联网应用）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">figure</span> <span class="attr">role</span>=<span class="string">"group"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">figcaption</span>&gt;</span>Dog breeds<span class="tag">&lt;/<span class="name">figcaption</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">figure</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"dog1.jpg"</span> <span class="attr">alt</span>=<span class="string">"Maltese Terrier"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">figcaption</span>&gt;</span>Adorable Maltese Terrier<span class="tag">&lt;/<span class="name">figcaption</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">figure</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">figure</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"dog2.jpg"</span> <span class="attr">alt</span>=<span class="string">"Black Labrador"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">figcaption</span>&gt;</span>Cute black labrador<span class="tag">&lt;/<span class="name">figcaption</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">figure</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">figure</span>&gt;</span></div></pre></td></tr></table></figure>
<p>想更深入地了解针对ARIA使用figure和figcaption元素，请查看我更早前的关于<a href="http://www.sitepoint.com/how-to-use-aria-effectively-with-html5/" target="_blank" rel="external">如何通过HTML5有效地使用ARIA</a>的文章。</p>
<h2 id="figcaption的正确用法"><a href="#figcaption的正确用法" class="headerlink" title="figcaption的正确用法"></a>figcaption的正确用法</h2><p>figcaption元素表示figure的标题或者图例。<br>不是每个figure都需要figcaption。<br>但是，当使用figcaption时，它理论上应该是figure块中的第一个或者最后一个元素。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">figure</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">figcaption</span>&gt;</span>Three different breeds of dog.<span class="tag">&lt;/<span class="name">figcaption</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"dog1.jpg"</span> <span class="attr">alt</span>=<span class="string">"Maltese Terrier"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"dog2.jpg"</span> <span class="attr">alt</span>=<span class="string">"Black Labrador"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"dog3.jpg"</span> <span class="attr">alt</span>=<span class="string">"Golden Retriever"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">figure</span>&gt;</span></div></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">figure</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"dog1.jpg"</span> <span class="attr">alt</span>=<span class="string">"Maltese Terrier"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"dog2.jpg"</span> <span class="attr">alt</span>=<span class="string">"Black Labrador"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"dog3.jpg"</span> <span class="attr">alt</span>=<span class="string">"Golden Retriever"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">figcaption</span>&gt;</span>Three different breeds of dog.<span class="tag">&lt;/<span class="name">figcaption</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">figure</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="你也可以在figcaption中使用流元素"><a href="#你也可以在figcaption中使用流元素" class="headerlink" title="你也可以在figcaption中使用流元素"></a>你也可以在figcaption中使用流元素</h2><p>如果你需要给图片添加更多的语义，你可以使用如h1和p元素。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">figure</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"dogs.jpg"</span> <span class="attr">alt</span>=<span class="string">"Group photo of dogs"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">figcaption</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Puppy School<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Championship Class of 2016<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">figcaption</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">figure</span>&gt;</span></div></pre></td></tr></table></figure>
<p>你是否有任何关于使用figure和figcaption元素的其他技巧呢？</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本文翻译自：&lt;a href=&quot;https://www.sitepoint.com/quick-tip-the-right-way-to-use-figure-and-figcaption-elements/&quot; target=&quot;_blank&quot; rel
    
    </summary>
    
      <category term="优秀译文" scheme="https://99team.github.io/categories/%E4%BC%98%E7%A7%80%E8%AF%91%E6%96%87/"/>
    
    
  </entry>
  
  <entry>
    <title>如何写兼容浏览器和Node.js环境的Javascript代码</title>
    <link href="https://99team.github.io/post/how-to-write-javascript-code-for-compatible-browsers-and-node/"/>
    <id>https://99team.github.io/post/how-to-write-javascript-code-for-compatible-browsers-and-node/</id>
    <published>2016-11-08T12:21:20.000Z</published>
    <updated>2016-12-13T12:34:28.069Z</updated>
    
    <content type="html"><![CDATA[<p>如果有打开过jQuery的源码（从1.11及以后），或者Vue.js、React.js的源码，都会在文件的前面看见这样一段代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">( <span class="function"><span class="keyword">function</span>(<span class="params"> global, factory </span>) </span>&#123;</div><div class="line"><span class="meta"></span></div><div class="line">	"use strict";</div><div class="line"></div><div class="line">	<span class="keyword">if</span> ( <span class="keyword">typeof</span> <span class="built_in">module</span> === <span class="string">"object"</span> &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">module</span>.exports === <span class="string">"object"</span> ) &#123;</div><div class="line"></div><div class="line">		<span class="comment">// For CommonJS and CommonJS-like environments where a proper `window`</span></div><div class="line">		<span class="comment">// is present, execute the factory and get jQuery.</span></div><div class="line">		<span class="comment">// For environments that do not have a `window` with a `document`</span></div><div class="line">		<span class="comment">// (such as Node.js), expose a factory as module.exports.</span></div><div class="line">		<span class="comment">// This accentuates the need for the creation of a real `window`.</span></div><div class="line">		<span class="comment">// e.g. var jQuery = require("jquery")(window);</span></div><div class="line">		<span class="comment">// See ticket #14549 for more info.</span></div><div class="line">		<span class="built_in">module</span>.exports = global.document ?</div><div class="line">			factory( global, <span class="literal">true</span> ) :</div><div class="line">			<span class="function"><span class="keyword">function</span>(<span class="params"> w </span>) </span>&#123;</div><div class="line">				<span class="keyword">if</span> ( !w.document ) &#123;</div><div class="line">					<span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>( <span class="string">"jQuery requires a window with a document"</span> );</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">return</span> factory( w );</div><div class="line">			&#125;;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">		factory( global );</div><div class="line">	&#125;</div><div class="line"></div><div class="line"><span class="comment">// Pass this if window is not defined yet</span></div><div class="line">&#125; )( <span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">"undefined"</span> ? <span class="built_in">window</span> : <span class="keyword">this</span>, <span class="function"><span class="keyword">function</span>(<span class="params"> window, noGlobal </span>) </span>&#123;</div><div class="line">  <span class="comment">//...</span></div></pre></td></tr></table></figure>
<p>以上是jQuery V3.1.0的一段代码。如果自己平时写的都是在浏览器上运行的js代码，又没有接触过Node.js的，可能就不知道 ‘module.exports’ 是什么，为什么要加以判断了。如果有接触过Node，就知道 ‘module.exports’ 其实就是一个js文件的出口，相当于ES6的export。</p>
<p>现在。从头介绍如何写一个兼容浏览器和Node环境的js代码。假设这个js文件名为export.js。</p>
<p>首页，为了避免污染全局作用域，立即执行函数是必须的。这个函数的参数，就像上面的代码那样，也传入一个函数吧。</p>
<p>export.js代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">factory</span>) </span>&#123;</div><div class="line">  <span class="comment">//判断宿主环境</span></div><div class="line">&#125;(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">//代码的核心</span></div><div class="line">&#125;));</div></pre></td></tr></table></figure>
<p>接下来，就是判断宿主环境。在浏览器环境下，window这个变量是无需创建，自动生成的；在Node环境下，module同理。export.js代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">factory</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">module</span> !== <span class="string">'undefined'</span>) &#123;</div><div class="line">    <span class="built_in">module</span>.exports = factory();</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    factory();</div><div class="line">  &#125;</div><div class="line">&#125;(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> vue = <span class="number">30</span>;</div><div class="line">  <span class="comment">//...</span></div><div class="line">&#125;));</div></pre></td></tr></table></figure>
<p>判断了宿主环境后，现在我们需要获得已经定义了的变量vue。在浏览器环境下，用形如</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="built_in">window</span>.vue = vue;</div></pre></td></tr></table></figure>
<p>这样的语句让vue这个变量变成全局的；而在node环境下，export.js用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">return</span> vue;</div></pre></td></tr></table></figure>
<p>而需要用到这个变量的文件加上这么一句：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> vue = <span class="built_in">require</span>(<span class="string">'./export.js'</span>);</div></pre></td></tr></table></figure>
<p>这样的语句获得vue这个变量。export.js代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">factory</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">module</span> !== <span class="string">'undefined'</span>) &#123;</div><div class="line">    <span class="built_in">module</span>.exports = factory();</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    factory();</div><div class="line">  &#125;</div><div class="line">&#125;(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> vue = <span class="number">30</span>;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">'undefined'</span>) &#123;</div><div class="line">    <span class="built_in">window</span>.vue = vue;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span> vue;</div><div class="line">  &#125;</div><div class="line">&#125;));</div></pre></td></tr></table></figure>
<p>其实，在看了Vue.js的这部分代码后，发现了一个更便捷的方式，就是把vue这个全局变量放在function(factory)里面，这样，下面只要写一个return vue; 就可以了。export.js代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">factory</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">module</span> !== <span class="string">'undefined'</span>) &#123;</div><div class="line">    <span class="built_in">module</span>.exports = factory();</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="built_in">window</span>.vue = factory();</div><div class="line">  &#125;</div><div class="line">&#125;(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> vue = <span class="number">30</span>;</div><div class="line">  <span class="keyword">return</span> vue;</div><div class="line">&#125;));</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果有打开过jQuery的源码（从1.11及以后），或者Vue.js、React.js的源码，都会在文件的前面看见这样一段代码：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pr
    
    </summary>
    
      <category term="Web开发" scheme="https://99team.github.io/categories/web%E5%BC%80%E5%8F%91/"/>
    
    
  </entry>
  
  <entry>
    <title>Yarn vs npm: 你需要知道的一切</title>
    <link href="https://99team.github.io/post/yarn-vs-npm-everything-you-need-to-know/"/>
    <id>https://99team.github.io/post/yarn-vs-npm-everything-you-need-to-know/</id>
    <published>2016-10-24T11:42:38.000Z</published>
    <updated>2016-12-13T12:34:28.069Z</updated>
    
    <content type="html"><![CDATA[<p>Yarn 是 Facebook, Google, Exponent 和 Tilde 开发的一款新的 JavaScript 包管理工具。就像我们可以从<a href="https://code.facebook.com/posts/1840075619545360" target="_blank" rel="external">官方文档</a>了解那样，它的目的是解决这些团队使用 npm 面临的少数问题，即：</p>
<ul>
<li>安装的时候无法保证速度/一致性</li>
<li>安全问题，因为 npm 安装时允许运行代码</li>
</ul>
<p>但请不要惊慌！它并没有试图完全取代 npm。Yarn 同样是一个从 npm 注册源获取模块的新的 CLI 客户端。注册的方式不会有任何变化 —— 你同样可以正常获取与发布包。</p>
<p>是否每个人现在都要跳上 Yarn 这辆被大肆宣传的列车？又或者你根本没机会碰到 npm 的这些问题。本篇文章将会比较 npm 与 Yarn，最终你可以决定哪款更适合你。</p>
<img src="/post/yarn-vs-npm-everything-you-need-to-know/yarn.jpg" alt="Yarn logo" title="Yarn logo">
<h2 id="Yarn-vs-npm-功能差异"><a href="#Yarn-vs-npm-功能差异" class="headerlink" title="Yarn vs npm: 功能差异"></a>Yarn vs npm: 功能差异</h2><p>乍一看 Yarn 与 npm 很类似，但通过引擎的对比就能察觉 Yarn 的不同。</p>
<h3 id="yarn-lock-文件"><a href="#yarn-lock-文件" class="headerlink" title="yarn.lock 文件"></a>yarn.lock 文件</h3><p>npm 和 Yarn 都使用 <code>package.json</code> 来跟踪项目的依赖，版本号并非一直准确，因为你可以定义版本号范围，这样你可以选择一个主版本和次要版本的包，但让 npm 安装最新的补丁也许可以修改一些 bug。</p>
<p>理想状态下使用<a href="http://semver.org/" target="_blank" rel="external">语义化版本</a>发布补丁不会包含大的变化，但不幸的是这必非真理。npm 的这种策略可能导致两台拥有相同 <code>package.json</code> 文件的机子安装了不同版本的包，这可能导致一些错误。</p>
<p>为了避免包版本的错误匹配，一个确定的安装版本被固定在一个锁文件中。每次模块被添加时，Yarn 就会创建（或更新）<code>yarn.lock</code> 文件，这样你就可以保证其它机子也安装相同版本的包，同时包含了 <code>package.json</code> 中定义的一系列允许的版本。</p>
<p>在 npm 中同样可以使用 <code>npm shrinkwrap</code> 命令来生成一个锁文件，这样在使用 <code>npm install</code> 时会在读取 <code>package.json</code> 前先读取这个文件，就像 Yarn 会先读取 <code>yarn.lock</code> 一样。这里的区别是 Yarn 总会自动更新 <code>yarn.lock</code>，而 npm 需要你重新操作。</p>
<ol>
<li><p><a href="https://yarnpkg.com/en/docs/configuration#toc-use-yarn-lock-to-pin-your-dependencies" target="_blank" rel="external">yarn.lock 文档</a></p>
</li>
<li><p><a href="https://docs.npmjs.com/cli/shrinkwrap" target="_blank" rel="external">npm shrinkwrap 文档</a></p>
</li>
</ol>
<h3 id="并行安装"><a href="#并行安装" class="headerlink" title="并行安装"></a>并行安装</h3><p>每当 npm 或 Yarn 需要安装一个包时，它会进行一系列的任务。在 npm 中这些任务是按包的顺序一个个执行，这意味着必须等待上一个包被完整安装才会进入下一个；Yarn 则并行的执行这些任务，提高了性能。</p>
<p>为了比较，我在没有使用 shrinkwrap/yarn.lock 的方式以及清理了缓存下使用 npm 与 Yarn 安装 <a href="https://www.npmjs.com/package/express" target="_blank" rel="external">express</a>，总共安装了 42 个依赖。</p>
<ul>
<li>npm: 9 s</li>
<li>Yarn: 1.37 s</li>
</ul>
<p>我无法相信自己的眼睛，所以重复以上步骤，但得到相同结果。接着我安装 <a href="https://www.npmjs.com/package/gulp" target="_blank" rel="external">gulp</a> 进行测试，总共安装了 195 个依赖。</p>
<ul>
<li>npm: 11 s</li>
<li>Yarn: 7.81 s</li>
</ul>
<p>似乎根据所需要安装的包的数量而有所不同，但 Yarn 依旧比较快。</p>
<h3 id="清晰的输出"><a href="#清晰的输出" class="headerlink" title="清晰的输出"></a>清晰的输出</h3><p>npm 默认情况下非常冗余，例如使用 <code>npm install</code> 时它会递归列出所有安装的信息；而 Yarn 则一点也不冗余，当可以使用其它命令时，它适当的使用 emojis 表情来减少信息（Windows 除外）。</p>
<img src="/post/yarn-vs-npm-everything-you-need-to-know/terminal.png" alt="Yarn vs npm: “yarn install” 命令输出截图" title="Yarn vs npm: “yarn install” 命令输出截图">
<h2 id="Yarn-vs-npm-CLI-的差异"><a href="#Yarn-vs-npm-CLI-的差异" class="headerlink" title="Yarn vs npm: CLI 的差异"></a>Yarn vs npm: CLI 的差异</h2><p>除了一些功能差异，Yarn 命令也存在一些区别。例如移除或修改了一些 npm 命令以及添加了几个有趣的命令。</p>
<h3 id="yarn-global"><a href="#yarn-global" class="headerlink" title="yarn global"></a>yarn global</h3><p>不像 npm 添加 <code>-g</code> 或 <code>--global</code> 可以进行全局安装，Yarn 使用的是 <code>global</code> 前缀。不过与 npm 类似，项目依赖不推荐全局安装。</p>
<p><code>global</code> 前缀只能用于 <code>yarn add</code>, <code>yarn bin</code>, <code>yarn ls</code> 和 <code>yarn remove</code>，除 <code>yarn add</code> 外，这些命令都和 npm 等效。</p>
<ol>
<li><a href="https://yarnpkg.com/en/docs/cli/global" target="_blank" rel="external">yarn global 文档</a></li>
</ol>
<h3 id="yarn-install"><a href="#yarn-install" class="headerlink" title="yarn install"></a>yarn install</h3><p><code>npm install</code> 命令会根据 <code>package.json</code> 安装依赖以及允许你添加新的模块；<code>yarn install</code> 仅会按 <code>yarn.lock</code> 或 <code>package.json</code> 里面的依赖顺序来安装模块。</p>
<ol>
<li><p><a href="https://yarnpkg.com/en/docs/cli/install" target="_blank" rel="external">yarn install 文档</a></p>
</li>
<li><p><a href="https://docs.npmjs.com/cli/install" target="_blank" rel="external">npm install 文档</a></p>
</li>
</ol>
<h3 id="yarn-add-–dev"><a href="#yarn-add-–dev" class="headerlink" title="yarn add  [–dev]"></a>yarn add  [–dev]</h3><p>与 <code>npm install</code> 类似，<code>yarn add</code> 允许你添加与安装模块，就像命令的名称一样，添加依赖意味着也会算定将依赖写入 <code>package.json</code>，类似 npm 的 <code>--save</code> 参数；Yarn 的 <code>--dev</code> 参数则是添加开发依赖，类似 npm 的 <code>--save-dev</code> 参数。</p>
<ol>
<li><p><a href="https://yarnpkg.com/en/docs/cli/add" target="_blank" rel="external">yarn add 文档</a></p>
</li>
<li><p><a href="https://docs.npmjs.com/cli/install" target="_blank" rel="external">npm install 文档</a></p>
</li>
</ol>
<h3 id="yarn-licenses-ls-generate-disclaimer"><a href="#yarn-licenses-ls-generate-disclaimer" class="headerlink" title="yarn licenses [ls|generate-disclaimer]"></a>yarn licenses [ls|generate-disclaimer]</h3><p>npm 没有类似命令来方便编写自己的包。<code>yarn licenses ls</code> 列出所有已安装包的许可协议。<code>yarn licenses generate-disclaimer</code> 生成包含已安装包许可协议的免责声明。某些协议要求使用者必须在项目中包含该协议，这时候该命令将变得非常好用。</p>
<ol>
<li><a href="https://yarnpkg.com/en/docs/cli/licenses" target="_blank" rel="external">yarn licenses 文档</a></li>
</ol>
<h3 id="yarn-why"><a href="#yarn-why" class="headerlink" title="yarn why"></a>yarn why</h3><p>该命令会查找依赖关系并找出为什么会将某些包安装在你的项目中。也许你明确为什么添加，也许它只是你安装包中的一个依赖，<code>yarn why</code> 可以帮你弄找出。</p>
<ol>
<li><a href="https://yarnpkg.com/en/docs/cli/why" target="_blank" rel="external">yarn why 文档</a></li>
</ol>
<h3 id="yarn-upgrade"><a href="#yarn-upgrade" class="headerlink" title="yarn upgrade"></a>yarn upgrade</h3><p>该命令会根据符合 <code>package.json</code> 设定的规则而不是 <code>yarn.lock</code> 定义的确切版本来将包更新到最新版本。如果想用 npm 来实现相同目的，可以这样执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">rm -rf node_modules</div><div class="line">npm install</div></pre></td></tr></table></figure>
<p>不要将该命令与 <code>npm update</code> 混淆，它指的是更新到自己的最新版。</p>
<ol>
<li><a href="https://yarnpkg.com/en/docs/cli/upgrade" target="_blank" rel="external">yarn upgrade 文档</a></li>
</ol>
<h3 id="yarn-generate-lock-entry"><a href="#yarn-generate-lock-entry" class="headerlink" title="yarn generate-lock-entry"></a>yarn generate-lock-entry</h3><p><code>yarn generate-lock-entry</code> 会基于 <code>package.json</code> 设置的依赖生成 <code>yarn.lock</code> 文件，该命令与 <code>npm shrinkwrap</code> 类似，但应该小心使用，因为通过 <code>yarn add</code> 和 <code>yarn upgrade</code> 命令添加或更新依赖时会自动更新生成该锁文件。</p>
<ol>
<li><p><a href="https://yarnpkg.com/en/docs/cli/generate-lock-entry" target="_blank" rel="external">yarn generate-lock-entry 文档</a></p>
</li>
<li><p><a href="https://docs.npmjs.com/cli/shrinkwrap" target="_blank" rel="external">npm shrinkwrap 文档</a></p>
</li>
</ol>
<h2 id="稳定性与可靠性"><a href="#稳定性与可靠性" class="headerlink" title="稳定性与可靠性"></a>稳定性与可靠性</h2><p>Yarn 被炒得这么火热会不会有问题？它正式发布当天就收到很多<a href="https://github.com/yarnpkg/yarn/issues" target="_blank" rel="external">问题反馈</a>，但官方处理问题的速度极快。这些表明社区正努力开发并修复bug。查看问题反馈的数量和类型可以发现 Yarn 在大多数用户的机子上表现的很稳定，但可能个别机子会有问题。</p>
<p>请注意虽然一个包管理器可能对你的项目非常重要，但它仅仅只是个工具，如果出了状况，恢复包不会困难，也并非要回归 npm。</p>
<h2 id="未来"><a href="#未来" class="headerlink" title="未来"></a>未来</h2><p>也许你了解 Node.js 与 io.js 之间的历史。简单来说：io.js 是 Node.js 一些核心开发者因为项目管理上的分歧而独立出来创建的分支。不同的是，io.js 选择了开放式管理，在不到一年的时间时，两支团队达成协议，io.js 被合并回 Node.js，无论对错，它为 Node.js 带来了相当多不错的功能。</p>
<p>我看到 npm 与 Yarn 和它们有着类似的模式，不过 Yarn 不是分支，它解决了 npm 的一些缺陷。如果 npm 从中学到东西并邀请 Facebook，Google 或其它 Yarn 的贡献者们来一起提升 npm 不是很酷吗？虽然言之过早，但我期待它会发生。</p>
<p>无论哪种结果，Yarn 前途一片光明。社区得到别人对新工具的赞扬后似乎很兴奋，不幸的是，社区并没有提供路线图，所以我不确定 Yarn 是否为我们准备了其它惊喜。</p>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>相比 npm 的默认配置，Yarn 获得不少赞同。我们可以方便生成锁文件，安装包时非常迅速并且他们会自动添加进 <code>package.json</code>，同时安装与使用 Yarn 的影响也很小，你可以直接在一个项目上尝试看它是否可以工作，这使得 Yarn 可以完美替代 npm。</p>
<p>我绝对推荐在一个项目中尽早使用 Yarn，如果你对安装和使用新软件持谨慎态度，可以等待几个月。毕竟 npm 久经考验，它在软件开发领域也有存在的价值。</p>
<p>使用你正确等待 npm 完成包的安装，也许这是阅读<a href="https://yarnpkg.com/en/docs/migrating-from-npm" target="_blank" rel="external">迁移指南</a>的最佳时刻 ;)</p>
<p>你怎么想呢？你是否已经在使用 Yarn？你是否将要尝试？或者这只是一个已经支离破碎的生态系统的进一步破碎？请在下面评论区留下你的观点。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Yarn 是 Facebook, Google, Exponent 和 Tilde 开发的一款新的 JavaScript 包管理工具。就像我们可以从&lt;a href=&quot;https://code.facebook.com/posts/1840075619545360&quot; targ
    
    </summary>
    
      <category term="优秀译文" scheme="https://99team.github.io/categories/%E4%BC%98%E7%A7%80%E8%AF%91%E6%96%87/"/>
    
    
  </entry>
  
  <entry>
    <title>使用 A-Frame 创建 3D 全景图</title>
    <link href="https://99team.github.io/post/create-a-3d-panorama-image-with-a-frame/"/>
    <id>https://99team.github.io/post/create-a-3d-panorama-image-with-a-frame/</id>
    <published>2016-10-22T10:11:28.000Z</published>
    <updated>2016-12-13T12:34:28.069Z</updated>
    
    <content type="html"><![CDATA[<img src="/post/create-a-3d-panorama-image-with-a-frame/aframe.png" alt="A-Frame" title="A-Frame">
<p>在 Mozilla 工作的五年里我见过许多很棒的项目。它们有的很受欢迎，有的很小众，但它们始终没有激起我与 MozVR 团队做 WebVR 和 <a href="https://aframe.io" target="_blank" rel="external">A-Frame</a> 项目的热情。</p>
<p>A-Frame 是一个致力于成为“构建 Web 虚拟现实的模块”，一个使用标记语言 或 JavaScript 在浏览器中创建 VR 体验的库。迫不急待的想使用这个项目就让我们从简单的示例开始：创建一个交互式的全景图比如<a href="https://aframe.io/examples/showcase/sky/" target="_blank" rel="external">这个</a>!</p>
<p><a href="https://davidwalsh.name/demo/3d-panorama-image.html" target="_blank" rel="external">查看DEMO</a></p>
<h2 id="获取-3D-图片"><a href="#获取-3D-图片" class="headerlink" title="获取 3D 图片"></a>获取 3D 图片</h2><p>获取一张符合全景效果要求（公认的柱状全景格式）的 3D 图片的最简单方式就是使用手机。Dan Zajdband 的 <a href="https://source.opennews.org/en-US/articles/virtual-reality-rest-us/" target="_blank" rel="external">Guri VR: 我们其它人的虚拟现实</a>识别 APP iOS版(<a href="https://itunes.apple.com/app/id904418768?mt=8240" target="_blank" rel="external">谷歌街景</a>) 和安桌版<br>(<a href="https://support.google.com/googlecamera/?hl=en#2839084" target="_blank" rel="external">Photo Sphere</a> 或 <a href="https://play.google.com/store/apps/details?id=com.google.vr.cyclops&amp;hl=en" target="_blank" rel="external">Cardboard Camera</a>)。Dan 的这篇优秀文章还提到 Flickr 上的 <a href="https://www.flickr.com/groups/equirectangular/" target="_blank" rel="external">Equirectangular 群组</a>，如果你想简单的获取一张图片来实验的话。</p>
<p>使用手机来获取一张可用图像可能是个不小的挑战 – 你要保证在旋转手机的时候非常平稳来避免边缘出现锯齿。</p>
<p><em>友情提示：案例中我为 A-Frame 提供了一个样品图像，因为谷歌街景的图片大小有 10M，直接将这么大的图片展现出来就太禽兽了。如果你想看我用 GSV 应用制作的图片<a href="https://davidwalsh.name/demo/3d-panorama-circle.jpg" target="_blank" rel="external">点击这里</a>。这张图片的视角是我站在生活中小路上的中间。</em></p>
<h2 id="使用-A-Frame-创建全景效果"><a href="#使用-A-Frame-创建全景效果" class="headerlink" title="使用 A-Frame 创建全景效果"></a>使用 A-Frame 创建全景效果</h2><p>不管信不信，获取一张好的图片是最困难的部分，因为 A-Frame 可以非常容易的将图片转成 3D 可视化。<br><code>A-Frame 元素可以用来创建全景效果</code>:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">&lt;a-scene&gt;</div><div class="line">&lt;a-sky src=&quot;https://davidwalsh.name/demo/3d-image.jpg&quot; rotation=&quot;0 -130 0&quot;&gt;&lt;/a-sky&gt;</div><div class="line">&lt;/a-scene&gt;</div></pre></td></tr></table></figure>
<p>以上代码是 A-Frame 常用语法（由HTML编写）；你也可以使用 JavaScript 来创建元素：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">// 创建场景</div><div class="line">var scene = document.createElement(&apos;a-scene&apos;);</div><div class="line"></div><div class="line">// 创建天空</div><div class="line">var sky = document.createElement(&apos;a-sky&apos;);</div><div class="line">sky.src = &apos;3d-image.jpg&apos;;</div><div class="line">sky.setAttribute(&apos;rotation&apos;, &#123; x: 0, y: -130, y: 0 &#125;);</div><div class="line"></div><div class="line">// 插入到页面中</div><div class="line">scene.appendChild(sky);</div><div class="line">document.body.appendChild(scene);</div></pre></td></tr></table></figure>
<p><a href="https://aframe.io/docs/0.2.0/components/rotation.html" target="_blank" rel="external"><code>rotation</code> 属性</a> 用来接收空间分隔 <code>x</code>, <code>y</code>, 和 <code>z</code> 轴旋转值；你可以使用它们来自定义视角位置。</p>
<p>A-Frame 可以让你点击、固定以及拖动组件来旋转图像。你也可以点击 VR 眼镜按钮在手机（cardboard maWebVR 所有网页 – 这是下一件大事！完成一个不错的装饰！）或支持 WebVR 的浏览器上以 3D 模式查看图像。</p>
<p><a href="https://davidwalsh.name/demo/3d-panorama-image.html" target="_blank" rel="external">查看DEMO</a></p>
<h2 id="A-Frame-简单创建-3D！"><a href="#A-Frame-简单创建-3D！" class="headerlink" title="A-Frame 简单创建 3D！"></a>A-Frame 简单创建 3D！</h2><p>当我说获取照片是困难的部分时并没有夸张；因为使用 A-Frame 来创建 3D 全景效果时仅需要使用少量的标记语言。创建全景图是一个流行的使用案例，但该效果仅仅是 A-Frame 的冰山一角。还想了解 A-Frame 可以做什么？查看更多案例请访问 <a href="https://aframe.io/" target="_blank" rel="external">A-Frame 官网</a> 以及 期待在所有网页中看到更多关于 WebVR 的事 – 这是下一件大事！</p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/post/create-a-3d-panorama-image-with-a-frame/aframe.png&quot; alt=&quot;A-Frame&quot; title=&quot;A-Frame&quot;&gt;
&lt;p&gt;在 Mozilla 工作的五年里我见过许多很棒的项目。它们有的很受欢迎，有的
    
    </summary>
    
      <category term="优秀译文" scheme="https://99team.github.io/categories/%E4%BC%98%E7%A7%80%E8%AF%91%E6%96%87/"/>
    
    
  </entry>
  
</feed>
